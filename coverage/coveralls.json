{"source_files":[{"name":"app/scripts/auto-config-fake-server.coffee","source":"'use strict'\n\nwindow.AutoConfigFakeServer = {}\napis                     = []\n\nclone = (obj) ->\n  isObject = typeof obj == 'object'\n  isNull = obj == null\n\n  return obj if isNull || !isObject\n\n  temp = obj.constructor()\n\n  for key, value of obj\n    hasOwnProperty = Object.prototype.hasOwnProperty.call obj, key\n\n    temp[key] = clone obj[key] if hasOwnProperty\n\n  temp\n\ngetJSON = (url, success) ->\n  xhr = new XMLHttpRequest()\n\n  xhr.onreadystatechange = ->\n    if xhr.readyState == 4\n      if xhr.status == 200\n        try\n          json = JSON.parse xhr.responseText\n        catch error\n          console.error 'Invalid JSON'\n          console.error error\n\n        success json\n      else\n        console.error 'Couldnt get ' + url\n        console.error xhr.statusText\n\n  xhr.open 'GET', url, true\n  xhr.responseType = 'text'\n  xhr.send()\n\nisApiCall = (url, host, schemes, basePath) ->\n  hostRegex   = /^((http[s]?):\\/)?\\/?([^:\\/\\s]+)(:([0-9])*)?((\\/\\w+)*\\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/\n  urlParts    = url.match hostRegex\n\n  if urlParts\n    port        = urlParts[4] || ''\n    isHost      = (urlParts[3] + port) == host\n    isScheme    = schemes.indexOf(urlParts[2]) != -1\n    baseRegex   = new RegExp('^' + basePath)\n    path        = urlParts[6] + urlParts[8]\n    isBasePath  = path.match baseRegex\n\n  return true if isHost && isScheme && isBasePath\n\n  false\n\ngetRef = (ref, api) ->\n  paths   = ref.split '/'\n  current = null\n\n  for path in paths\n    if path == '#'\n      current = api\n    else if current[path]\n      current = current[path]\n    else\n      return false\n\n  current\n\nbuildDefinition = (definition, api, isArray = null) ->\n  build      = {}\n  isString   = typeof definition == 'string'\n  definition = getRef definition, api if isString\n  properties = definition?.properties\n\n  for key, property of properties\n    build[key] = buildProperty property, api\n\n  build = enumCombinations build, properties  if isArray\n\n  build\n\nbuildProperty = (property, api) ->\n  build = null\n\n  if property.sample\n    build = property.sample\n  else if property.enum\n    build = getEnum property.enum\n  else if property.type == 'integer' || property.type == 'number'\n    build = 123\n  else if property.type == 'string'\n    build = 'abc'\n  else if property.type == 'boolean'\n    build = true\n  else if property.items?['$ref']\n    isArray = property.type == 'array'\n    build   = buildDefinition property.items?['$ref'], api, isArray\n\n  build\n\nenumCombinations = (build, properties) ->\n  combinations = [build]\n\n  for key, property of properties\n    if property.enum\n      newCombinations = []\n\n      for combination in combinations\n        for item in property.enum\n          cloned      = clone combination\n          cloned[key] = item\n\n          newCombinations.push cloned\n\n      combinations = newCombinations\n\n  combinations\n\ngetEnum = (items) ->\n  rand        = Math.random() * items.length\n  randFloored = Math.floor rand\n\n  items[randFloored]\n\nsetRespondWith = (fakeServer, api) ->\n  schemes = api.schemes || []\n\n  for scheme in schemes\n    for path, methods of api.paths\n      for method, methodDefinition of methods\n        schema = methodDefinition?.responses?['200']?.schema\n\n        if schema\n          build     = buildProperty schema, api\n          buildJSON = JSON.stringify build\n          url       = scheme + '://' + api.host + api.basePath + path\n          urlRegex  = new RegExp(url + '(\\\\?(.)*)?$')\n          response  = [200, { 'Content-Type': 'application/json' }, buildJSON]\n\n          fakeServer.respondWith method, urlRegex, response\n\nwindow.AutoConfigFakeServer.init = ->\n  fakeServer = sinon.fakeServer.create()\n  fakeServer.xhr.useFilters = true\n\n  filter = (method, url) ->\n    for api in apis\n      return false if isApiCall url, api.host, api.schemes, api.basePath\n\n    true\n\n  fakeServer.xhr.addFilter filter\n\n  window.AutoConfigFakeServer.fakeServer = fakeServer\n\nwindow.AutoConfigFakeServer.restore = ->\n  apis = []\n\n  AutoConfigFakeServer.fakeServer?.restore();\n\nwindow.AutoConfigFakeServer.consume = (schema, callback) ->\n  isString = typeof schema == 'string'\n\n  onSuccess = (json) ->\n    apis.push json\n\n    setRespondWith AutoConfigFakeServer.fakeServer, json\n\n    callback?()\n\n  if isString\n    getJSON schema, onSuccess\n  else\n    onSuccess schema\n\n# For testing purposes\nif window.AutoConfigFakeServerPrivates\n  window.AutoConfigFakeServerPrivates =\n    getJSON         : getJSON\n    isApiCall       : isApiCall\n    getRef          : getRef\n    buildDefinition : buildDefinition\n    setRespondWith  : setRespondWith\n    apis            : apis\n    getEnum         : getEnum\n    enumCombinations: enumCombinations\n    clone           : clone\n","coverage":[1,null,1,null,1,null,1,null,1,376,376,376,376,277,null,99,99,287,287,287,287,null,null,99,null,null,1,8,8,8,4844,4844,8,4,4,null,0,0,0,null,4,null,4,4,null,null,null,8,8,8,null,null,1,6,6,6,6,6,6,6,6,6,6,null,6,3,null,3,null,null,1,60,60,60,60,180,180,60,120,120,null,0,null,null,60,null,null,1,57,57,7,null,57,57,57,57,null,57,57,120,120,null,57,23,null,57,null,null,1,160,160,160,44,116,0,116,20,96,35,61,7,54,50,50,null,160,null,null,1,30,30,30,86,86,14,14,28,28,28,84,84,84,84,null,null,14,null,null,30,null,null,1,1,1,1,1,null,null,1,8,8,8,8,12,12,12,12,12,12,30,30,30,30,30,40,40,40,40,40,40,40,40,null,null,null,null,40,null,0,null,null,30,null,null,12,null,null,8,null,null,1,6,6,6,6,0,0,0,0,0,null,null,0,null,6,6,null,null,1,6,6,6,null,null,1,3,3,3,3,3,3,null,3,2,null,1,null,null,null,1,1]}],"git":{"head":{"id":"21889e29e6cafa7e1c12489948a855f40fe2b9ce","author_name":"Alex Tran","author_email":"vietnogi@gmail.com","committer_name":"Alex Tran","committer_email":"vietnogi@gmail.com","message":"change name to auto config fake server"},"branch":"master","remotes":[{"name":"origin","url":"git@github.com:appirio-tech/swagger-fake-server.git"}]},"run_at":"2015-05-14T23:27:19.094Z","service_name":"travis-pro","repo_token":"h56EnYYQesUlylCqyZkDpBa1dTZsGuNAr"}